/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.AdminUI;

import Business.ConfigureEcoSystem;
import Database.mysqlConnection;
import com.mysql.cj.jdbc.result.ResultSetMetaData;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author monika
 */
public class SystemAdminManageEcosystem extends javax.swing.JPanel {

    /**
     * Creates new form SystemAdminManageEcosystem
     */
    Connection conn;
    PreparedStatement pst;
    ResultSet rs;
    public SystemAdminManageEcosystem() throws SQLException {
        initComponents();
        populateEcosystemTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtEcoSystemID = new javax.swing.JTextField();
        txtEcoSystemName = new javax.swing.JTextField();
        btnCreate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEcosystem = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        jLabel1.setText("Ecosystem ID");

        jLabel2.setText("Ecosystem Name ");

        btnCreate.setText("Create ");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        tblEcosystem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "EcoSystem Name", "EcoSystem ID"
            }
        ));
        jScrollPane1.setViewportView(tblEcosystem);

        btnUpdate.setText("Update Details");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete Ecosystem");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCreate)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtEcoSystemID)
                                .addComponent(txtEcoSystemName, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addComponent(btnUpdate)
                        .addGap(101, 101, 101)
                        .addComponent(btnDelete)))
                .addContainerGap(118, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtEcoSystemID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtEcoSystemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(btnCreate)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addContainerGap(201, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        int EcoSystemID = Integer.parseInt(txtEcoSystemID.getText());
        String EcoSystemName = txtEcoSystemName.getText();
        boolean checkData = false;
        for(ConfigureEcoSystem checkEco:ConfigureEcoSystem.EcoSystemList){
            if(checkEco.getEcoSystemName().equals(EcoSystemName)){
                checkData =true;
                break;
                
            }
            else{
                checkData = false;
            }
        }
        System.out.println(checkData);
        if(checkData == false){
            ConfigureEcoSystem createEcosystem = new ConfigureEcoSystem();
            createEcosystem.setEcoSystemName(EcoSystemName);
            createEcosystem.setEcoSystemID(EcoSystemID);
            ConfigureEcoSystem.EcoSystemList.add(createEcosystem);
        }
        int size = ConfigureEcoSystem.EcoSystemList.size();
        
        System.out.println(size);
        
        try {
            rs = ConfigureEcoSystem.CheckDBforEcosystem();
            if(rs.next()){
                ResultSet rs1 = ConfigureEcoSystem.CheckEcosystemTableforData(EcoSystemName);
                if(rs1.next()){
                    JOptionPane.showMessageDialog(this, "Ecosystem Already Exists");
                }
                else{
                    boolean isCreated = ConfigureEcoSystem.CreateDatainEcosystemTable(EcoSystemID, EcoSystemName);
                    populateEcosystemTable();
                    if(isCreated){
                        JOptionPane.showMessageDialog(this, "EcoSystem Created");
                    }
                }
                
            }
            else{
                ConfigureEcoSystem.CreateTableforEcosystem();
                boolean isCreated = ConfigureEcoSystem.CreateDatainEcosystemTable(EcoSystemID, EcoSystemName);
                populateEcosystemTable();
                if(isCreated){
                    JOptionPane.showMessageDialog(this, "EcoSystem Created");
                }
                
            }
            
            
            
            /** conn = mysqlConnection.getConnection();
             * String sql1 = """
             * SELECT table_name, table_schema, table_type
             * FROM information_schema.tables
             * WHERE table_name = 'ecosystems' and table_schema = 'projectdatabase'
             * ORDER BY table_name ASC;""";
             * String sql2 = "CREATE TABLE ecosystems (EcosystemID int NOT NULL,EcosystemName varchar(100) NOT NULL UNIQUE);";
             * String sql3 = "INSERT INTO ecosystems (EcosystemID,EcosystemName) VALUES(?,?);";
             * String sql4 = "SELECT * FROM ecosystems WHERE EcosystemName = ?;";
             * 
             * try {
             * pst = conn.prepareStatement(sql1);
             * rs = pst.executeQuery();
             * if(rs.next()){
             * PreparedStatement pst3 = conn.prepareStatement(sql4);
             * pst3.setString(1, txtEcoSystemName.getText());
             * ResultSet rs1 = pst3.executeQuery();
             * if(rs1.next()){
             * JOptionPane.showMessageDialog(null, "Ecosystem Already Exists");
             * 
             * }
             * else{
             * PreparedStatement pst4 = conn.prepareStatement(sql3);
             * pst4.setInt(1, Integer.parseInt(txtEcoSystemID.getText()));
             * pst4.setString(2, txtEcoSystemName.getText());
             * var isCreated = pst4.execute();
             * if(isCreated == true){
             * JOptionPane.showMessageDialog(null, "Ecosystem Created");
             * }
             * 
             * }
             * 
             * }
             * else{
             * PreparedStatement pst1 = conn.prepareStatement(sql2);
             * pst1.execute();
             * PreparedStatement pst2 = conn.prepareStatement(sql3);
             * pst2.setInt(1, Integer.parseInt(txtEcoSystemID.getText()));
             * pst2.setString(2, txtEcoSystemName.getText());
             * var isCreated = pst2.execute();
             * if(isCreated == true){
             * JOptionPane.showMessageDialog(null, "Ecosystem Created");
             * }
             * }
             * } catch (Exception ex) {
             * JOptionPane.showMessageDialog(null, ex);
             * } */
        } catch (SQLException ex) {
            Logger.getLogger(SystemAdminManageEcosystem.class.getName()).log(Level.SEVERE, null, ex);
        }

        
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int selectRow = tblEcosystem.getSelectedRow();
        int UpdateEcoID = Integer.parseInt(txtEcoSystemID.getText());
        String UpdateEcoName = txtEcoSystemName.getText();
        if(selectRow>=0){
            int EcoID = (int) tblEcosystem.getValueAt(selectRow, 0);
            String EcoName = (String) tblEcosystem.getValueAt(selectRow, 1);
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Confirm Update?","Warning",selectionButton);
            if(selectionResult == JOptionPane.YES_OPTION){
                try {
                    ConfigureEcoSystem.UpdateDatainEcoSystemTable(UpdateEcoID, UpdateEcoName,EcoName);
                    populateEcosystemTable();
                    txtEcoSystemName.setText("");
                    txtEcoSystemID.setText("");
                    
                    
                } catch (SQLException ex) {
                    Logger.getLogger(SystemAdminManageEcosystem.class.getName()).log(Level.SEVERE, null, ex);
                }
               
                
            }
            
            
        }
        else{
            JOptionPane.showMessageDialog(null,"Please select a row to update");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectRow = tblEcosystem.getSelectedRow();
        if(selectRow>=0){
            String EcoName = (String) tblEcosystem.getValueAt(selectRow, 1);
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Confirm Delete?","Warning",selectionButton);
            if(selectionResult == JOptionPane.YES_OPTION){
                try {
                    ConfigureEcoSystem.DeleteDatafromEcoSystemTable(EcoName);
                    populateEcosystemTable();
                } catch (SQLException ex) {
                    Logger.getLogger(SystemAdminManageEcosystem.class.getName()).log(Level.SEVERE, null, ex);
                }
               
            }
            
        }
        else{
            JOptionPane.showMessageDialog(null,"Please select a row to delete");
        }
        
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblEcosystem;
    private javax.swing.JTextField txtEcoSystemID;
    private javax.swing.JTextField txtEcoSystemName;
    // End of variables declaration//GEN-END:variables

    private void populateEcosystemTable() throws SQLException{
        DefaultTableModel EcoSystemTable = (DefaultTableModel) tblEcosystem.getModel();
        ResultSet rs1 = ConfigureEcoSystem.GetAllDataFromEcoSystemTable();
        ResultSetMetaData metaData = (ResultSetMetaData) rs1.getMetaData();
        int columnCount = metaData.getColumnCount();
        EcoSystemTable.setRowCount(0);
        
        Object[] row = new Object[columnCount];
        while (rs1.next()){
            //Get object from column with specific index of result set to array of objects
            for (int i = 0; i < columnCount; i++){
                row[i] = rs1.getObject(i+1);
            }
            //Now add row to table model with that array of objects as an argument
            EcoSystemTable.addRow(row);
        }
    }
}
