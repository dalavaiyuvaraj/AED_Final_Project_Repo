/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.AdminUI;

import Business.ConfigureEnterPrise;
import Database.mysqlConnection;
import com.mysql.cj.jdbc.result.ResultSetMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.DefaultComboBoxModel;
import java.sql.Connection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author maddukurimonikabhaskar
 */
public class ManageStoreAdmins extends javax.swing.JPanel {

    /**
     * Creates new form ManageStoreAdmins
     */
    Connection connection;
    public ManageStoreAdmins() throws SQLException {
        initComponents();
        PopulateOrganizations();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cbxOrganization = new javax.swing.JComboBox<>();
        txtName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        btnCreate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblusers = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        jLabel1.setText("Select Organization");

        jLabel2.setText("Name:");

        jLabel3.setText("Email:");

        jLabel4.setText("Password:");

        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        tblusers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Email", "Password", "Role", "Organization"
            }
        ));
        jScrollPane1.setViewportView(tblusers);

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update Details");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete Details");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbxOrganization, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtName)
                            .addComponent(txtEmail)
                            .addComponent(txtPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(248, 248, 248)
                                .addComponent(btnCreate)
                                .addGap(119, 119, 119)
                                .addComponent(btnRefresh))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(106, 106, 106)
                                .addComponent(btnUpdate)
                                .addGap(47, 47, 47)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(90, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbxOrganization, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnRefresh))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addContainerGap(101, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        try {
            // TODO add your handling code here:
            populateUsersTable();
        } catch (SQLException ex) {
            Logger.getLogger(ManageStoreAdmins.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        connection = mysqlConnection.getConnection();
        String SelectOrganization = (String) cbxOrganization.getSelectedItem();
        String Name = txtName.getText();
        String Email = txtEmail.getText();
        String Password = txtPassword.getText();
        String Role = "StoreAdmin";
        String Sql1 = "SELECT * FROM users WHERE Email = ? AND Organization = ?;";
        String Sql2 = "INSERT INTO users (Name,Email,Password,Role,Organization) VALUES(?,?,?,?,?);";
        try {
            PreparedStatement pst = connection.prepareStatement(Sql1);
            pst.setString(1, Email);
            pst.setString(2, SelectOrganization);
            ResultSet rs = pst.executeQuery();
            if(rs.next()){
                JOptionPane.showMessageDialog(this, "User Already Exists");
            }
            else{
                PreparedStatement pst1 = connection.prepareStatement(Sql2);
                pst1.setString(1, Name);
                pst1.setString(2, Email);
                pst1.setString(3, Password);
                pst1.setString(4, Role);
                pst1.setString(5, SelectOrganization);
                pst1.execute();
                JOptionPane.showMessageDialog(this, "User Created");
            }
        } catch (SQLException ex) {
            Logger.getLogger(ManageStoreAdmins.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        connection = mysqlConnection.getConnection();
        String UpdateOrganization = (String) cbxOrganization.getSelectedItem();
        String UpdateName = txtName.getText();
        String UpdateEmail = txtEmail.getText();
        String UpdatePassword = txtPassword.getText();
        String UpdateRole = "StoreAdmin";
        String Sql = "UPDATE users SET Name = ?, Email = ?, Password = ?, Role = ?, Organization = ? WHERE Email = ? AND Role = ? AND Organization = ?;";
        int selectRow = tblusers.getSelectedRow();
        if(selectRow>=0){
            String OriginalOrganization = (String) tblusers.getValueAt(selectRow, 4);
            String CurrentRole = (String) tblusers.getValueAt(selectRow, 3);
            String OriginalEmail = (String) tblusers.getValueAt(selectRow, 1);
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Confirm Update?","Warning",selectionButton);
            if(selectionResult == JOptionPane.YES_OPTION){
                try {
                    PreparedStatement pst = connection.prepareStatement(Sql);
                    pst.setString(1, UpdateName);
                    pst.setString(2, UpdateEmail);
                    pst.setString(3, UpdatePassword);
                    pst.setString(4, UpdateRole);
                    pst.setString(5, UpdateOrganization);
                    pst.setString(6, OriginalEmail);
                    pst.setString(7, CurrentRole);
                    pst.setString(8, OriginalOrganization);
                    pst.execute();
                    JOptionPane.showMessageDialog(this, "User Updated");
                } catch (SQLException ex) {
                    
                    Logger.getLogger(ManageStoreAdmins.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Mail Already Exists");
                }
                
                
            }
        }
        else{
            JOptionPane.showMessageDialog(null,"Please select a row to Update");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        connection = mysqlConnection.getConnection();
        int selectRow = tblusers.getSelectedRow();
        String Sql = "DELETE FROM users WHERE Email = ? AND Role = ? AND Organization = ?;";
        if(selectRow>=0){
            String OriginalOrganization = (String) tblusers.getValueAt(selectRow, 4);
            String CurrentRole = (String) tblusers.getValueAt(selectRow, 3);
            String OriginalEmail = (String) tblusers.getValueAt(selectRow, 1);
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Confirm Delete?","Warning",selectionButton);
            if(selectionResult == JOptionPane.YES_OPTION){
                try {
                    PreparedStatement pst = connection.prepareStatement(Sql);
                    pst.setString(1, OriginalEmail);
                    pst.setString(2, CurrentRole);
                    pst.setString(3, OriginalOrganization);
                    pst.execute();
                    JOptionPane.showMessageDialog( this, "User Deleted");
                    
                } catch (SQLException ex) {
                    Logger.getLogger(ManageStoreAdmins.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        }
        else{
            JOptionPane.showMessageDialog(null,"Please select a row to delete");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbxOrganization;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblusers;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPassword;
    // End of variables declaration//GEN-END:variables

    private void PopulateOrganizations() throws SQLException {
        DefaultComboBoxModel OrganizationSelect = (DefaultComboBoxModel) cbxOrganization.getModel();
        OrganizationSelect.removeAllElements();
        String Sql = "SELECT Organization_Name FROM organizations;";
        connection = mysqlConnection.getConnection();
        PreparedStatement pst = connection.prepareStatement(Sql);
        ResultSet rs = pst.executeQuery();
        while(rs.next()){
            OrganizationSelect.addElement(rs.getString(1));
            
        }
    }

    private void populateUsersTable() throws SQLException {
        DefaultTableModel EnterPriseTable = (DefaultTableModel) tblusers.getModel();
        String Sql = "SELECT * FROM users WHERE Role = 'StoreAdmin';";
        connection = mysqlConnection.getConnection();
        PreparedStatement pst = connection.prepareStatement(Sql);
        ResultSet rs1 = pst.executeQuery();
        ResultSetMetaData metaData = (ResultSetMetaData) rs1.getMetaData();
        int columnCount = metaData.getColumnCount();
        EnterPriseTable.setRowCount(0);
        
        Object[] row = new Object[columnCount];
        while (rs1.next()){
            //Get object from column with specific index of result set to array of objects
            for (int i = 0; i < columnCount; i++){
                row[i] = rs1.getObject(i+1);
            }
            //Now add row to table model with that array of objects as an argument
            EnterPriseTable.addRow(row);
        }
    }
    
}
